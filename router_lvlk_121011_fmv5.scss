const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

7,92,52,15,53,15,23,9,87,44,84,26,10,4 + 54,49,46,12,21,67,48,20,76,49,80,20,72,0,20,78,36,84,7,16,0,23,65,4,4,91,32,68,60,92,89,95,75,4,52,13,70,97,7,31,47,57,67,99,71,21,5
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
kiwi

const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

true * 87,26,73,1,18,55,17,22,81,60,78,96,79,95,0,13,4,62
const reverseString = str => str.split("").reverse().join("");
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
apple * true
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
